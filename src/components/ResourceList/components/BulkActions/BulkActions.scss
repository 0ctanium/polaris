@import '../../Variables';

$button-min-height: control-height();
$vertical-padding: ($button-min-height - line-height(body) - rem(2px)) / 2;
$control-vertical-adjustment: rem(-12px);
$control-size: rem(16px);
$bulk-actions-offset-slide-in-start: rem(-40px);
$stacking-order: ( focused: 20 );
$popover-top-adjustment: spacing(extra-tight) / 2;
$toggle-button-width: rem(110px);
$chekbox-label-margin: rem(20px); // 48px $handle-width - 16px checkbox / 2 sides + spacing(extra-tight)

$button-min-height: control-height();
$button-vertical-padding: ($button-min-height - line-height(body) - rem(2px)) / 2;

.Button {
  @include text-style-button;
  @include button-base;
  box-shadow: none;

  &:not(:first-child) {
    margin-left: -1px;
  }
}

.Group {
  @include text-style-input;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

.Group-smallScreen {
    width: 100%;
    display: flex;
    @include breakpoint-after($resource-list-small-breakpoint) {
      display: none;
    }
}

.Group-largeScreen {
  display: none;
  @include breakpoint-after($resource-list-small-breakpoint) {
    display: flex;
  }
}

.ButtonGroup {
  display: flex;
  width: 100%;
  align-items: center;
  flex-wrap: nowrap;
  margin-bottom: spacing(tight);
  margin-top: spacing(tight);
  justify-content: flex-end;
  box-shadow: inset 0 0 0 1px color(sky, dark);
  border-radius: border-radius();

  @include breakpoint-after($resource-list-small-breakpoint) {
    justify-content: flex-start;
  }

  .Button {
    border-radius: 0;

    &:focus {
      z-index: z-index(focused, $stacking-order);
      border-color: color(indigo);
      outline: 0;
      box-shadow: 0 0 0 1px color(indigo);
    }
  }

  .BulkActionsActions{
    flex: 1;
    display: flex;
    margin-left: -1px;
  }

  .Button-cancel {
    flex: 0 0 auto;
    border-radius: 0 border-radius() border-radius() 0;
    z-index: 0;
    margin-left: -1px;
    width: $toggle-button-width;

    &:focus {
      z-index: 1;
    }
  }
}

.CheckableButton{
  @include text-style-button;
  display: inline-flex;
  align-items: center;
  min-height: $button-min-height;
  min-width: $button-min-height;
  margin: 0;
  padding: $button-vertical-padding spacing();
  line-height: 1;
  cursor: pointer;
  user-select: none;
  text-decoration: none;
  flex: 1 1 0;
  text-align: left;
  background: color(white);
  border: border(dark);
  border-radius: border-radius() 0 0 border-radius();
  border-right-color: transparent;

  @include breakpoint-after($resource-list-small-breakpoint) {
    &:only-child{
      border-radius: border-radius();
      border: border(dark);
    }
  }

  &:hover,
  &:active {
    border-right-color: transparent;
  }

  &:focus{
    outline: none;
  }

  &.CheckableButton-plain {
    border: border(transparent);
    border-radius: border-radius();
    position: absolute;
  }

  &.CheckableButton-selectMode {
    @include text-emphasis-subdued;
    font-weight: 600;
  }

  &.CheckableButton-selected {
    color: color(indigo);
    @include breakpoint-after($resource-list-small-breakpoint) {
      border-color: color(sky, dark);
    }
  }
}

.Checkbox {
  pointer-events: none;
  height: $control-size;
  width: $control-size;
  margin-left: (-1 * (spacing(tight) + rem(1px))); // 1px accounts for border
}

.Label {
  margin-left: $chekbox-label-margin;
  flex: 1;
  // @include breakpoint-after($bulk-actions-small-breakpoint) {
  //   .CheckableButton-selected:not(:only-child) & {
  //     min-width: rem(96px);
  //     margin-right: spacing();
  //   }
  // }
}

.Button-select {
  @include text-style-button;
  border-radius: border-radius();
  position: absolute;
  right: 0;
  width: $toggle-button-width;

  .Icon {
    @include recolor-icon(color(ink, lightest));
    margin-right: (spacing(tight));
    margin-left: (-1 * spacing(extra-tight))
  }
}

.Popover {
  max-height: $button-min-height;
  margin-left: -1px;
}

// .Actions:last-child {
//   .Button:last-child {
//     border-top-right-radius: border-radius();
//     border-bottom-right-radius: border-radius();
//   }
// }

.ButtonFadeContainer {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

.Fade {
  will-change: opacity;
  opacity: 1;
  transition: opacity easing() duration();
}

.Fade-appear,
.Fade-enter,
.Fade-exit {
  opacity: 0;
}

.Fade-appearing,
.Fade-entering {
  opacity: 1;
}

.Slide {
  will-change: transform;
  transform: translateY(0);
  transition: transform easing() duration();
}

.Slide-appear,
.Slide-enter,
.Slide-exit {
  transform: translateX($bulk-actions-offset-slide-in-start);
}

.Slide-appearing,
.Slide-entering {
  transform: translateY(0);
}
