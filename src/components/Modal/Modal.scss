$top-offset-slide-in-start: rem(200px);
$entry-iterations: 1;
$small-width: rem(620px);
$large-width: rem(980px);
$backdrop-color: rgba(33, 43, 54, 0.4);
$button-height: rem(36px);
$modal-ui-bar-height: $button-height + (spacing() * 2);
$body-max-height: rem(500px);
$body-width-offset: spacing(extra-loose) * 2;
$body-height-offset: top-bar-height() + $modal-ui-bar-height;
$body-height-offset-with-footer: top-bar-height() + ($modal-ui-bar-height * 2);

.Container {
  position: absolute;
  z-index: z-index(overlay);
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;

  @include breakpoint-after(nav-min-window-corrected()) {
    justify-content: center;
  }
}

.CloseButton {
  @include unstyled-button;
  margin-right: -1 * spacing(tight);
  padding: spacing(tight);

  &:focus,
  &:active {
    border-radius: border-radius(large);
    background: plain-button-background();
  }
}

.FadeUp {
  will-change: transform, opacity;
  opacity: 1;
  transform: translateY(0);
  transition: transform easing() duration(), opacity easing() duration();

  &.entering,
  &.exiting,
  &.exited {
    opacity: 0;
    transform: translateY($top-offset-slide-in-start);
  }

  &.entered {
    opacity: 1;
    transform: translateY(0);
  }
}

.ScaleIn {
  will-change: transform, opacity;
  opacity: 1;
  transform: scale(1);
  transition: transform easing() duration(), opacity easing() duration();

  &.entering,
  &.exiting,
  &.exited {
    opacity: 0;
    transform: scale(1.15);
  }

  &.entered {
    opacity: 1;
    transform: scale(1);
  }
}

.Modal {
  position: relative;
  display: flex;
  flex-direction: column;
  width: 100vw;
  max-height: calc(100vh - #{top-bar-height()});
  background: color(white);
  box-shadow: shadow(layer);

  &:focus {
    outline: 0;
  }

  @include breakpoint-after(nav-min-window-corrected()) {
    max-width: $small-width;
    margin: 0 auto;
    border-radius: border-radius(large);
  }
}

.Modal-large {
  @include breakpoint-after(nav-min-window-corrected()) {
    max-width: calc(100vw - #{$body-width-offset});
  }

  @include breakpoint-after($large-width + $body-width-offset) {
    max-width: $large-width;
  }
}

.graphic .CloseButton {
  position: absolute;
  right: spacing(tight);
}

.Header {
  padding: spacing() spacing(loose);
  border-bottom: border();
}

.HeaderActions {
  flex: 0 1 auto;
  align-self: flex-end;
  align-items: flex-end;
}

.Body {
  max-height: calc(100vh - #{$body-height-offset});

  .Modal-limitHeight & {
    @include breakpoint-after(nav-min-window-corrected()) {
      height: rem($body-max-height);
    }
  }
}

.Body-hasFooter {
  max-height: calc(100vh - #{$body-height-offset-with-footer});
}

.Footer {
  display: flex;
  align-self: flex-end;
  width: 100%;
  min-height: spacing() * 4;
  padding: spacing();
  border-top: border();
}

.FooterContent {
  width: 100%;
}

.Section {
  flex: 0 0 auto;
  padding: spacing() spacing(loose);

  &:first-of-type {
    padding-top: spacing(loose);
  }

  &:not(:last-of-type) {
    border-bottom: border();
  }

  &.subdued {
    background: color(sky, light);
  }

  &.flush {
    padding: 0;
  }
}

.IFrame {
  display: block;
  width: $small-width;
  max-width: 100vw;
  border: none;

  @include breakpoint-after(nav-min-window-corrected()) {
    max-width: $small-width;
  }
}

.BodyWrapper {
  overflow: hidden;
  border-radius: border-radius(large);
}

.Backdrop {
  position: absolute;
  z-index: z-index(overlay) - 1;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: block;
  background: $backdrop-color;
  animation: fade-in duration() $entry-iterations forwards;
  opacity: 1;
  will-change: opacity;
}

@keyframes fade-in {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

.Spinner {
  margin: spacing();
  text-align: center;
}
